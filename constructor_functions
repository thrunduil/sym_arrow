/*
*  Morfa programming language.
*  This file is a part of sym_arrow library.
*
*  Copyright (c) Pawe³ Kowal 2017
*
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/

#include "sym_arrow/functions/expr_functions.h"
#include "sym_arrow/functions/constructor_functions.h"
#include "sym_arrow/func/func_names.h"
#include "sym_arrow/ast/ast.h"
#include "sym_arrow/functions/global_context_initializers.h"

namespace sym_arrow
{

expr sym_arrow::function(const identifier& sym)
{
    return sym_arrow::function(sym, nullptr, 0);
};

expr sym_arrow::function(const identifier& sym, const expr& arg1)
{
    expr args[] = {arg1};
    return sym_arrow::function(sym, args, 1);
};

expr sym_arrow::function(const identifier& sym, const expr& arg1, const expr& arg2)
{
    expr args[] = {arg1, arg2};
    return sym_arrow::function(sym, args, 2);
};

expr sym_arrow::function(const identifier& sym, const std::vector<expr>& arg)
{
    return sym_arrow::function(sym, arg.data(), arg.size());
};

expr sym_arrow::function(const identifier& sym, std::initializer_list<expr> arg)
{
    return sym_arrow::function(sym, arg.begin(), arg.size());
};

expr sym_arrow::function(const identifier& sym, const expr* arg, size_t n)
{
    for (size_t i = 0; i < n; ++i)
        arg[i].cannonize(do_cse_default);

    {
        expr res;
        bool evaled         = global_function_evaler()
                                .eval_function(sym, arg, n, res);

        if (evaled == true)
            return res;
    }

    using info              = ast::function_rep_info;
    info f_info             = info(sym.get_ptr().get(), n, arg);

    ast::expr_ptr ep        = ast::function_rep::make(f_info);
    return expr(ep);
};

};
